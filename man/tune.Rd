% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tune.R, R/tune.earth.R, R/tune.randomForest.R,
%   R/tune.svm.R
\name{tune}
\alias{tune}
\alias{tune.earth}
\alias{tune.randomForest}
\alias{tune.svm_linear}
\alias{tune.svm_polynomial}
\alias{tune.svm_radial}
\alias{tune.svm_sigmoid}
\title{Tune parameters of a model-building method}
\usage{
tune(method, ...)

# To call MARS (methods are identical)
  tune(method = "earth", df, resp, nfold = 10, nrep = 1, ...)
  tune(method = "mars", df, resp, nfold = 10, nrep = 1, ...)

tune(method = "rf", df, resp, nfold = 10, nrep = 1, ...)

tune(method = "svm_linear", df, resp, nfold = 10, nrep = 1, ...)

tune(method = "svm_polynomial", df, resp, nfold = 10, nrep = 1, ...)

tune(method = "svm_radial", df, resp, nfold = 10, nrep = 1, ...)

tune(method = "svm_sigmoid", df, resp, nfold = 10, nrep = 1, ...)
}
\arguments{
\item{method}{The model-building method. Should be \code{"rf"} at this point.}

\item{...}{Additional arguments to be passed to model-building. This will
likely be vectors of the values of the parameters to test.}

\item{df}{The data frame to train on}

\item{resp}{The name of the column containing the response variable}

\item{nfold}{The number of folds to use in evaluation. Default is \code{10}.}

\item{nrep}{The number of repetitions to use in evaluation. Default is \code{1}.}

\item{ignore_col}{Columns to ignore during model-building. Default is \code{NA}.}
}
\value{
An object of the S3 class \code{"tune"}. Includes a list of the model with
the best performing parameters.
\itemize{
\item \verb{$model}: the final model with the tuned parameters
\item \verb{$param_tested}: a list of the parameters used in the tuning process
\item \verb{$nfold_tested}: the number of folds in each iteration of tuning
\item \verb{$nrep_tested}: the number of repetitions in each iteration of tuning
\item \verb{$pred_name}: the predictors from the data set
}
}
\description{
\code{tune} evaluates model performance on a combination of parameters. The methods
available are the same as \verb{[eval_model()]}.

Passing \code{method = "mars"} or \code{method = "earth"} tunes a MARS model using the
function \verb{[earth::earth()]}.

Passing \code{method = "rf"} tunes the function \verb{[randomForest::randomForest()]}.

For all SVM methods, the function is tuned on \verb{[e1071::svm()]} and assumes
that the SVM type being used for model-building is \code{"eps-regression"}. This
assumes that the response variable being passed to the function is numeric.
The list of parameters to tune can be found in documentation for the function
\code{?e1071::svm}. The methods \code{"svm_linear"}, \code{"svm_polynomial"},
\code{"svm_radial"}, and \code{"svm_sigmoid"} are separated because each SVM kernel can
take different combinations of parameters to tune.
}
\details{
Calling \code{print} on a \code{"tune"} object provides details on the model type and
the model performance.

Calling \code{predict} on a \code{"tune"} object runs prediction using the class of the
model stored in the object.

There are many parameters to tune \code{"earth"}. Likely the most useful ones will
be \code{fast.k}, \code{fast.beta}, \code{newvar.penalty}, \code{penalty}, \code{minspan}, and
\code{degree}. If time allows, \code{earth} can do more thorough variable selection with
different pruning methods and cross-validation.

Possible parameters to tune \code{"rf"} are \code{mtry}, \code{replace}, \code{sampsize},
\code{nodesize}, and \code{maxnodes}.

Possible parameters to tune \code{"svm_linear"} include \code{cost}, \code{tolerance}, and
\code{epsilon}.

Possible parameters to tune \code{"svm_polynomial"} include \code{degree}, \code{gamma},
\code{coef0}, \code{cost}, \code{tolerance}, and \code{epsilon}.

Possible parameters to tune \code{"svm_radial"} include \code{gamma}, \code{cost},
\code{tolerance}, and \code{epsilon}.

Possible parameters to tune \code{"svm_sigmoid"} include \code{gamma}, \code{coef0}, \code{cost},
\code{tolerance}, and \code{epsilon}.
}
\examples{
# Using "mars" or "earth" as the method
tune(
  method = "earth", df = your_data, resp = "y",
  nfold = 10, nrep = 10,
  fast.k = c(0, 5, 10, 20),
  fast.beta = c(0, 1),
  newvar.penalty = c(0, 0.01, 0.1, 0.2, 0.25),
  penalty = c(2, 3, 4),
  minspan = c(0, 1, 4, 10)
  degree = c(1, 2, 3)
)
# Using tune and "rf" (randomForest) as the method
tune(
  method = "rf", df = your_data, resp = "y",
  nfold = 10, nrep = 10,
  mtry = c(2, 4, 8, 14),
  replace = c(T, F),
  sampsize = c(10, 20, 30)
)
# Using "svm_linear" as the method
tune(
  method = "svm_linear", df = your_data, resp = "y",
  nfold = 10, nrep = 10,
  cost = c(0, 0.1, 0.25, 0.5, 1),
  epsilon = c(0, , 0.05, 0.1, 0.5, 1),
)
}
